
// 206 反转链表

// var reverseList = function(head){
//   let p1 = head
//   let p2 = null

// }

// console.log(reverseList([1,2,3,4,5]))


// function sumAll(arr) {
//   var num =0
//   console.log(Math.max(...arr)+1);
  
//   for(let i = Math.min(...arr); i< Math.max(...arr)+1;i++){
//     num+=i;
//   }
//   console.log(num)
//   // return num;
// }

// sumAll([1, 4]);


// const a = [1,2,3]
// const b = [2,3,4]
// a.filter((v)=>{
//   console.log(v);
  
// })




/**
 * @param {character[][]} board
 * @return {void} 
 */

// const board = [
//   ['','','9','5','','','','','3'],
//   ['','3','','9','','7','','6',''],
//   ['6','','','','','','','','7'],
//   ['5','1','','','6','','','',''],
//   ['','','6','','1','','7','8',''],
//   ['','','','','','','','9',''],
//   ['4','','','','5','','','3',''],
//   ['','','8','','','2','','7',''],
//   ['','','','7','9','','1','','']
// ]

// const board = [
//   ['1','','','','7','','','9',''],
//   ['','5','','1','','9','','','7'],
//   ['7','','','','','4','','5',''],
//   ['','1','3','','','7','','8','9'],
//   ['','4','','6','','8','','','2'],
//   ['6','','8','','1','','5','','4'],
//   ['','7','','8','','','9','6',''],
//   ['','','1','','6','','7','4',''],
//   ['9','','','7','','','8','','']
// ]
// const board = [
//   ['7','','','','','','','9',''],
//   ['','','','','','9','','',''],
//   ['','','','3','','','','',''],
//   ['','1','','','','','','',''],
//   ['','5','','','','','','',''],
//   ['','','7','','','4','','',''],
//   ['','','','','5','','','','2'],
//   ['','','','','','','8','4',''],
//   ['','','','','','','','','']
// ]

const board = [
  ['3','','','','','','','',''],
  ['','','','','','','','7',''],
  ['','8','','1','','','','',''],
  ['','','3','','','','','',''],
  ['','','','','','','','',''],
  ['','','8','','','','1','',''],
  ['','','','','','','','',''],
  ['','','','5','','','','',''],
  ['','7','','','','','','5','']
]
// console.log(board)
const isValid = (row,col,num) => {
  for(let i = 0;i < 9;i++){
      let boxRow = parseInt(row/3)*3;
      let boxCol = parseInt(col/3)*3;
      if(board[row][i] == num || board[i][col] == num || board[boxRow+parseInt(i/3)][boxCol+i%3] == num){
          return false;
      }
  }
  return true;
}

var solveSudoku = function(board) {

  let solve = () => {
      for(let i = 0;i < 9;i++){
          for(let j = 0;j < 9;j++){
              if(board[i][j] == ''){
                  for(let num = 1; num <10; num++){
                      if(isValid(i,j,num)){
                          board[i][j] = String(num);
                          if(solve(board)){
                              return true;
                          }
                          board[i][j] = '';
                      }
                  }
                  return false;
              }
          }
      }
      return true;
  }

  solve(board);
  return board;
}

const r = solveSudoku(board)
// console.log(board)

console.log(r)
